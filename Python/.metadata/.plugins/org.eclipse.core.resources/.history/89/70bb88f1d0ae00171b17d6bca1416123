'''
Created on Oct 6, 2017

@author: Haunspergers
'''


import json
from tkinter import Tk, IntVar, StringVar, Menu, Frame, Label, ttk, Text, Button, \
    Checkbutton, messagebox, Canvas, Scrollbar, Entry
from tkinter.constants import *

from SpellMakerGUI import OpenGUI
from tkinter.filedialog import askopenfilename


data={}
data["stats_filename"]="data/stats.json"
data["elements_filename"]="data/elements.json"
data["spellAttributes_filename"]="data/spell_attributes.json"
data["wizardSpells_filename"]="data/wizard_spells.json"
data["classes_filename"]="data/classes.json"
data["runes_filename"]="data/runes.json"

with open(data["stats_filename"], 'r') as f:
    data["stats"] = json.load(f)
with open(data["classes_filename"], 'r') as f:
    data["classes"] = json.load(f)       
with open(data["runes_filename"], 'r') as f:
    data["runes"] = json.load(f)
with open(data["elements_filename"], 'r') as f:
    data["elements"] = json.load(f)
with open(data["spellAttributes_filename"], 'r') as f:
    data["spellAttributes"] = json.load(f)
with open(data["wizardSpells_filename"], 'r') as f:
    data["wizardSpells"] = json.load(f)

class MainGUI:
    def __init__(self,player_filename=""):
        
        
        ############### load data and save settings
        self.save_on = True
        
        if not player_filename:
            player_filename = "data/character_template.json"
            self.save_on = False
        
        self.player_filename = player_filename
        
        with open(player_filename, 'r') as f:
            self.playerdata = json.load(f)
            
        self.player_class_data = data["classes"][self.playerdata["class"]]
        
        
            ##########
        
        self.root = Tk()
        
        
        

        
        
        ### variables
        
        self.levelvar = IntVar()
        self.levelvar.set(self.playerdata["level"])
        
        self.namevar = StringVar()
        self.namevar.set(self.playerdata["name"])
        
        self.goldvar = IntVar()
        self.goldvar.set(self.playerdata["gold"])
        
        self.background_text = self.playerdata["background"]
        
        self.journal_text = self.playerdata["journal"]
        
        ##############################
        #add widgets
        self.GUIMenu()
        
        self.GUIHeader()
        
        self.GUIBody()
        
        
        
        ##############################
        
        
        ### configure root
        self.root.grid_rowconfigure(0, weight=0)
        self.root.grid_rowconfigure(1, weight=1,minsize=400)
        self.root.grid_columnconfigure(0, weight=1,minsize=400)
        
        
        self.root.title("RPG Leveler")
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        self.root.mainloop()
        
        
        
    ##############################
    #   Constructor functions    #
    ##############################
        
        
        
        ### add menu
    def GUIMenu(self):
        self.menubar = Menu(self.root)
        
        self.fileMenu = Menu(self.menubar, tearoff=0)
        self.fileMenu.add_command(label="Open", command=self.open_file)
        self.fileMenu.add_command(label="Save", command=self.save)
        self.fileMenu.add_separator()
        self.fileMenu.add_command(label="Exit", command=self.root.quit)
        self.menubar.add_cascade(label="File", menu=self.fileMenu)
        
        self.spellMenu = Menu(self.menubar, tearoff=0)
        self.spellMenu.add_command(label="Add Spell", command=OpenGUI)
        self.spellMenu.add_command(label="Edit Spell", command=self.hello)
        self.menubar.add_cascade(label="Spells", menu=self.spellMenu)
        
        self.itemMenu = Menu(self.menubar, tearoff=0)
        self.itemMenu.add_command(label="Add Item", command=self.hello)
        self.itemMenu.add_command(label="Edit Item", command=self.hello)
        self.menubar.add_cascade(label="Items", menu=self.itemMenu)
        
        self.root.config(menu=self.menubar)
        
        
        
        
        
        
        
        ### add header
        
        
    def GUIHeader(self):
        
        self.header = Frame(self.root,pady=5)
        
        
        self.header_name = Label(self.header,text="Name: ")
        self.header_namevar = Label(self.header,textvariable=self.namevar)
        
        self.header_level = Label(self.header,text="Level: ")
        self.header_levelvar = Label(self.header,textvariable=self.levelvar)
        
        self.header_gold = Label(self.header,text="Gold: ")
        self.header_goldvar = Label(self.header,textvariable=self.goldvar)
        
        
        
        self.header.grid(row=0,column=0,sticky="NSEW")
        
        self.header_name.grid(row=0,column=0,sticky="NSEW")
        self.header_namevar.grid(row=0,column=1,sticky="NSEW")
        
        self.header_level.grid(row=0,column=3,sticky="NSEW")
        self.header_levelvar.grid(row=0,column=4,sticky="NSEW")
        
        self.header_gold.grid(row=0,column=6,sticky="NSEW")
        self.header_goldvar.grid(row=0,column=7,sticky="NSEW")
        
        
        
        ### configure header grid
        
        self.header.grid_columnconfigure(2,minsize=30,weight=2)
        self.header.grid_columnconfigure(5,minsize=30,weight=2)
        self.header.grid_columnconfigure(8,weight=5)
        
        
        
    def GUIBody(self):
        
        #notebook
        self.body = ttk.Notebook()
        
        self.tabAbilities = Frame(self.root)
        self.tabClass = Frame(self.root)
        self.tabSkills = Frame(self.root)
        self.tabItems = Frame(self.root)
        self.tabBackground = Frame(self.root)
        self.tabJournal = Frame(self.root)
        
        ###########################
        #add tabs
        self.GUIAbilitiesTab()
        self.GUIBackgroundTab()
        self.GUIClassTab()
        self.GUIItemsTab()
        self.GUIJournalTab()
        self.GUIOverviewTab()
        self.GUISkillsTab()
        #
        ###########################
        self.body.add(self.tabAbilities,text="Abilities")
        self.body.add(self.tabClass,text=self.player_class_data["tab_name"])
        self.body.add(self.tabSkills,text="Skills")
        self.body.add(self.tabItems,text="Items")
        self.body.add(self.tabBackground,text="Background")
        self.body.add(self.tabJournal,text="Journal")
        

        self.body.grid(row=1,column=0,sticky="NSEW")
     
     
     
        
    ##################################
    #            tabs                #
    ##################################
        
        

    def GUIBackgroundTab(self):
        self.background_box = Text(self.tabBackground,width=10,height=10,font="TkFixedFont",wrap=WORD)
        self.background_box.insert(END,self.background_text)
        self.background_box.grid(row=0,column=0,sticky="NSEW")
        self.tabBackground.grid_rowconfigure(0, weight=1)
        self.tabBackground.grid_columnconfigure(0, weight=1)


    

    def GUIJournalTab(self):
        self.journal_box = Text(self.tabJournal,width=10,height=10,font="TkFixedFont",wrap=WORD)
        self.journal_box.insert(END,self.journal_text)
        self.journal_box.grid(row=0,column=0,sticky="NSEW")
        self.tabJournal.grid_rowconfigure(0, weight=1)
        self.tabJournal.grid_columnconfigure(0, weight=1)
        
        
        
    def GUIAbilitiesTab(self):
        
        
        self.Attributes = {}
        self.i=0
        self.Abilities_pointsLeftvar = IntVar()
        self.Abilities_pointsLeftvar.set(self.playerdata["points"]["attributes"])
        
        #header
        self.tabAbilities_abil = Frame(self.tabAbilities,padx=10,pady=10)
        self.tabAbilities_pointsLeft = Label(self.tabAbilities,text="Points Left:")
        self.tabAbilities_pointsLeftvar = Label(self.tabAbilities,textvariable=self.Abilities_pointsLeftvar)
        
        
        
        #attributes
        for attribute in self.playerdata["stats"]["attributes"]:
                #print(attribute)
                self.Attributes[attribute] = {}
                self.Attributes[attribute]["value"] = IntVar()
                self.Attributes[attribute]["value"].set(self.playerdata["stats"]["attributes"][attribute])
                
                self.Attributes[attribute]["button+"] = Button(self.tabAbilities_abil,text="+",command=lambda attribute=attribute: self.change_attribute(attribute,1))
                self.Attributes[attribute]["button-"] = Button(self.tabAbilities_abil,text="-",command=lambda attribute=attribute: self.change_attribute(attribute,-1))
                self.Attributes[attribute]["valueLabel"] = Label(self.tabAbilities_abil,textvariable=self.Attributes[attribute]["value"],font=("Ariel", 25))
                self.Attributes[attribute]["atributeLabel"] = Label(self.tabAbilities_abil,text=attribute.upper()+" ",font=("Ariel", 25))
                self.Attributes[attribute]["spacerLabel"] = Label(self.tabAbilities_abil,text="",height=1)
                
                self.Attributes[attribute]["atributeLabel"].grid(row=self.i,column=0,sticky="NSEW",rowspan=2)
                self.Attributes[attribute]["button-"].grid(row=self.i+1,column=4,sticky="NSEW")
                self.Attributes[attribute]["valueLabel"].grid(row=self.i,column=2,sticky="NSEW",rowspan=2)
                self.Attributes[attribute]["button+"].grid(row=self.i,column=4,sticky="NSEW")
                self.Attributes[attribute]["spacerLabel"].grid(row=self.i+2,column=3,sticky="NSEW")
                
                self.i+=3
        
        self.tabAbilities_pointsLeftvar.grid(row=0,column=2)
        self.tabAbilities_pointsLeft.grid(row=0,column=1)
        self.tabAbilities_abil.grid(row=1,column=0)


        
    def GUISkillsTab(self):

        self.Skills = {}
        self.sk_x=0
        self.sk_y=0
        
        
        #attributes
        for skill in data["stats"]["skills"]:
            
            #print(skill)
            self.Skills[skill["name"]] = {}
            
            self.Skills[skill["name"]]["frame"] = Frame(self.tabSkills,relief="sunken",bd=1)
            
            self.Skills[skill["name"]]["isTrained"] = IntVar()
            self.Skills[skill["name"]]["isTrained"].set(self.playerdata["stats"]["skills"][skill["name"]])
            
            self.Skills[skill["name"]]["value"] = IntVar()
            self.Skills[skill["name"]]["value"].set((self.Attributes[skill["base"]]["value"].get()-10)//2+self.Skills[skill["name"]]["isTrained"].get()*2)
            
            #print (self.Skills[skill["name"]]["value"].get())
            
            self.Skills[skill["name"]]["check"] = Checkbutton(self.Skills[skill["name"]]["frame"],variable=self.Skills[skill["name"]]["isTrained"],state=DISABLED,command=lambda skill=skill: print(skill))
            self.Skills[skill["name"]]["valueLabel"] = Label(self.Skills[skill["name"]]["frame"],textvariable=self.Skills[skill["name"]]["value"],font=("Ariel", 12))
            self.Skills[skill["name"]]["atributeLabel"] = Label(self.Skills[skill["name"]]["frame"],text=skill["name"]+" ",font=("Ariel", 12))
            
            
            self.Skills[skill["name"]]["frame"].grid(row=self.sk_y,column=self.sk_x,sticky="we")
            
            self.Skills[skill["name"]]["check"].pack(side="left")
            self.Skills[skill["name"]]["atributeLabel"].pack(side="left")
            self.Skills[skill["name"]]["valueLabel"].pack(side="right")
            
            
            self.sk_x+=1
            if self.sk_x > 1:
                self.sk_y+=1
                self.sk_x=0
        


        ######## Items
    def GUIItemsTab(self):
        
        
        self.ItemsFrame = {}
        
        
        self.ItemsFrame["canvas_width"]=0
        
        def onFrameConfigure(event):
            self.ItemsFrame["canvas"].configure(scrollregion=self.ItemsFrame["canvas"].bbox("all"))
        
        def onCanvasConfigure(event):
            #Resize the inner frame to match the canvas
            minWidth = self.ItemsFrame["frame"].winfo_reqwidth()
            minHeight = self.ItemsFrame["frame"].winfo_reqheight()
    
            if self.ItemsFrame["canvas_frame"].winfo_width() >= minWidth:
                newWidth = self.ItemsFrame["canvas_frame"].winfo_width()
            else:
                newWidth = minWidth
    
            if self.ItemsFrame["canvas_frame"].winfo_height() >= minHeight:
                newHeight = self.ItemsFrame["canvas_frame"].winfo_height()
                #Hide the scrollbar when not needed
                self.ItemsFrame["scroll_bar"].grid_remove()
            else:
                newHeight = minHeight
                #Show the scrollbar when needed
                self.ItemsFrame["scroll_bar"].grid()
    
            self.ItemsFrame["canvas"].itemconfig(self.ItemsFrame["window"], width=newWidth, height=newHeight)
                
        self.ItemsFrame["canvas_frame"]=Frame(self.tabItems,relief=GROOVE,bd=1)
        self.ItemsFrame["canvas_frame"].pack(fill="both",expand="YES")
        
        self.ItemsFrame["canvas"]=Canvas(self.ItemsFrame["canvas_frame"])
        self.ItemsFrame["frame"]=Frame(self.ItemsFrame["canvas"])
        self.ItemsFrame["scroll_bar"]=Scrollbar(self.ItemsFrame["canvas_frame"],orient="vertical",command=self.ItemsFrame["canvas"].yview)
        self.ItemsFrame["canvas"].configure(yscrollcommand=self.ItemsFrame["scroll_bar"].set)
        
        self.ItemsFrame["scroll_bar"].grid(row=0,column=1,sticky="NS")
        self.ItemsFrame["canvas"].grid(row=0,column=0,sticky="NSEW")
        self.ItemsFrame["window"] = self.ItemsFrame["canvas"].create_window((0,0),window=self.ItemsFrame["frame"],anchor='nw')
        
        self.ItemsFrame["frame"].bind("<Configure>", onFrameConfigure)
        self.ItemsFrame["canvas"].bind("<Configure>", onCanvasConfigure)
        
        self.ItemsFrame["canvas_frame"].grid_rowconfigure(0,weight=1)
        self.ItemsFrame["canvas_frame"].grid_columnconfigure(0,weight=1)
        self.ItemsFrame["frame"].grid_columnconfigure(0, weight=1)
            
        self.i=0
        self.Items = []
        
        for item in self.playerdata["items"]:
            print(self.Items)
            self.Items.append({})
            self.Items[self.i]["frame"] = Frame(self.ItemsFrame["frame"],relief=RIDGE,bg="grey",padx=1,pady=1)
            self.Items[self.i]["name"] = Entry(self.Items[self.i]["frame"])
            self.Items[self.i]["name"].insert(END, item["name"])
            self.Items[self.i]["description"] = Text(self.Items[self.i]["frame"],width=10,height=5,wrap=WORD)
            self.Items[self.i]["description"].insert(END,item["description"])
            
            self.Items[self.i]["name"].grid(row=0,column=0)
            self.Items[self.i]["description"].grid(row=1,column=0,sticky="NSEW")
            self.Items[self.i]["frame"].grid(padx=10,pady=10,sticky="EW")
            
            self.Items[self.i]["frame"].grid_columnconfigure(0, weight=1)
            
            
            
            self.i+=1
            
        def addItem():
            item={}
            item["frame"] = Frame(self.ItemsFrame["frame"],relief=RIDGE,bg="grey",padx=1,pady=1)
            item["name"] = Entry(self.Items[self.i]["frame"])
            item["description"] = Text(self.Items[self.i]["frame"],width=10,height=5,wrap=WORD)
            item["name"].grid(row=0,column=0)
            item["description"].grid(row=1,column=0,sticky="NSEW")
            item["frame"].grid(padx=10,pady=10,sticky="EW")
            item["frame"].grid_columnconfigure(0, weight=1)
            
            self.Items.append(item)
        
        
        self.addItemButton = Button(self.ItemsFrame["frame"],text="+",command=addItem).place(rely=5.0, relx=5.0, x=0, y=0, anchor="se")
            
            
        ######## Class
    def GUIClassTab(self):
        pass

        ######## Overview
    def GUIOverviewTab(self):
        pass






        
        
        
        
        
        
        
    
    #######################################
    #            functions                #
    #######################################
        


    def hello(self):
        pass
    
    
    
    def change_attribute(self,attribute,amount):
        if amount>0:
            if self.Abilities_pointsLeftvar.get()>0:
                self.Attributes[attribute]["value"].set(self.Attributes[attribute]["value"].get()+amount)
                self.Abilities_pointsLeftvar.set(self.Abilities_pointsLeftvar.get()-1)
        else:
            if self.Attributes[attribute]["value"].get()>self.playerdata["stats"]["base_attributes"][attribute]:
                self.Attributes[attribute]["value"].set(self.Attributes[attribute]["value"].get()+amount)
                self.Abilities_pointsLeftvar.set(self.Abilities_pointsLeftvar.get()+1)
        self.updateSkills()
    
    
    def on_close(self):
        if self.save_on and messagebox.askyesno("RPG","Do you want to save changes?"):
            self.save()
        self.root.destroy()
    
    
    
    def save(self):
        if self.save_on:
            
            for attribute in self.playerdata["stats"]["attributes"]:
                self.playerdata["stats"]["attributes"][attribute] = self.Attributes[attribute]["value"].get()
            
            self.playerdata["level"] = self.levelvar.get()
            self.playerdata["name"] = self.namevar.get()
            self.playerdata["gold"] = self.goldvar.get() 
            self.playerdata["background"] = self.background_box.get(1.0,END)[:-1]
            self.playerdata["journal"] =  self.journal_box.get(1.0,END)[:-1]
            self.playerdata["points"]["attributes"] = self.Abilities_pointsLeftvar.get()
            
            with open(self.player_filename, 'w') as player_file:
                json.dump(self.playerdata, player_file, indent=4)
        
    def updateSkills(self):
        for skill in data["stats"]["skills"]:
            self.Skills[skill["name"]]["value"].set((self.Attributes[skill["base"]]["value"].get()-10)//2+self.Skills[skill["name"]]["isTrained"].get()*2)
        
    def open_file(self):
        p_fn = openFileName()
        if p_fn:
            self.root.destroy()
            openGUI(p_fn)

def openFileName():
    temp=Tk()
    temp.withdraw()
    temp.overrideredirect(1)
    player_filename=askopenfilename(filetypes=[("Player files (.rpgplayer)","*.rpgplayer"),("JSON files (.json)","*.json"),("All",".*")])
    temp.deiconify()
    temp.destroy()
    return player_filename



def openGUI(player_filename=openFileName()):
    GUI = MainGUI(player_filename)
    del GUI



openGUI()